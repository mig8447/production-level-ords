DROP TABLE TASKS CASCADE CONSTRAINTS;
DROP TABLE TASK_LISTS CASCADE CONSTRAINTS;

CREATE TABLE TASK_LISTS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
    TITLE VARCHAR2(280 BYTE) NOT NULL,
    DESCRIPTION VARCHAR2(4000 BYTE),
    CREATED_BY VARCHAR2(320 BYTE),
    CREATED_ON TIMESTAMP (6) WITH TIME ZONE,
    UPDATED_BY VARCHAR2(320 BYTE),
    UPDATED_ON TIMESTAMP (6) WITH TIME ZONE,
    CONSTRAINT TASK_LISTS_PK PRIMARY KEY ( ID )
)
ENABLE PRIMARY KEY USING INDEX;
CREATE OR REPLACE TRIGGER TASK_LISTS_BI BEFORE INSERT ON TASK_LISTS FOR EACH ROW
DECLARE
BEGIN
    :NEW.CREATED_ON := CURRENT_TIMESTAMP;
END;
/
CREATE OR REPLACE TRIGGER TASK_LISTS_BU BEFORE UPDATE ON TASK_LISTS FOR EACH ROW
DECLARE
BEGIN
    :NEW.UPDATED_ON := CURRENT_TIMESTAMP;
END;
/
CREATE TABLE TASKS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
    TITLE VARCHAR2(280 BYTE) NOT NULL,
    DESCRIPTION VARCHAR2(4000 BYTE),
    START_DATE DATE,
    DUE_DATE DATE,
    IS_DONE VARCHAR2(1),
    TASK_LIST_ID NUMBER NOT NULL,
    CREATED_BY VARCHAR2(320 BYTE),
    CREATED_ON TIMESTAMP (6) WITH TIME ZONE,
    UPDATED_BY VARCHAR2(320 BYTE),
    UPDATED_ON TIMESTAMP (6) WITH TIME ZONE,
    CONSTRAINT TASKS_PK PRIMARY KEY ( ID ),
    CONSTRAINT TASKS_CHK1 CHECK ( IS_DONE IN ( 'Y', 'N' ) ),
    CONSTRAINT TASKS_TASK_LISTS_FK2 FOREIGN KEY ( TASK_LIST_ID ) REFERENCES TASK_LISTS( ID )
)
ENABLE PRIMARY KEY USING INDEX;
CREATE OR REPLACE TRIGGER TASKS_BI BEFORE INSERT ON TASKS FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.IS_DONE IS NULL THEN
       :NEW.IS_DONE := 'N';
    END IF;
    :NEW.CREATED_ON := CURRENT_TIMESTAMP;
END;
/
CREATE OR REPLACE TRIGGER TASKS_BU BEFORE UPDATE ON TASKS FOR EACH ROW
DECLARE
BEGIN
    :NEW.UPDATED_ON := CURRENT_TIMESTAMP;
END;
/
